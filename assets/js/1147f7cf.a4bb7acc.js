"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3580],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>b});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function c(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),l=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},u=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(a),f=i,b=p["".concat(s,".").concat(f)]||p[f]||d[f]||r;return a?t.createElement(b,o(o({ref:n},u),{},{components:a})):t.createElement(b,o({ref:n},u))}));function b(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:i,o[1]=c;for(var l=2;l<r;l++)o[l]=a[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}f.displayName="MDXCreateElement"},77477:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var t=a(87462),i=(a(67294),a(3905));const r={},o="Notificaciones",c={unversionedId:"laravel/devjobs/Notes/Notificaciones",id:"laravel/devjobs/Notes/Notificaciones",title:"Notificaciones",description:"// Almacena las notificaciones en la base de datos",source:"@site/docs/laravel/2-devjobs/Notes/16-Notificaciones.md",sourceDirName:"laravel/2-devjobs/Notes",slug:"/laravel/devjobs/Notes/Notificaciones",permalink:"/my-website/docs/laravel/devjobs/Notes/Notificaciones",draft:!1,editUrl:"https://github.com/Leo-Zubiri/my-website/tree/master/docs/laravel/2-devjobs/Notes/16-Notificaciones.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Directiva can",permalink:"/my-website/docs/laravel/devjobs/Notes/can"},next:{title:"Invokable Controller",permalink:"/my-website/docs/laravel/devjobs/Notes/invokable"}},s={},l=[{value:"Guardar Notificaciones en la base de datos",id:"guardar-notificaciones-en-la-base-de-datos",level:2},{value:"Crear y enviar notificacion",id:"crear-y-enviar-notificacion",level:2},{value:"Obtener Notificaciones",id:"obtener-notificaciones",level:2}],u={toc:l},p="wrapper";function d(e){let{components:n,...a}=e;return(0,i.kt)(p,(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"notificaciones"},"Notificaciones"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"php artisan make:notification Notification")),(0,i.kt)("p",null,"Se crea en la ruta: ",(0,i.kt)("inlineCode",{parentName:"p"},"app/Notifications/Notification.php")),(0,i.kt)("h2",{id:"guardar-notificaciones-en-la-base-de-datos"},"Guardar Notificaciones en la base de datos"),(0,i.kt)("p",null,"En el archivo de notificacion generado se debe agregar:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"\n    // Almacena las notificaciones en la base de datos\n    public function toDatabase($notifiable){\n\n    }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"    public function via($notifiable)\n    {\n        return ['mail','database'];\n    }\n")),(0,i.kt)("p",null,"y crear una tabla para almacenar:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"php artisan notifications:table")),(0,i.kt)("h2",{id:"crear-y-enviar-notificacion"},"Crear y enviar notificacion"),(0,i.kt)("p",null,"Desde el constructor de la notificacion se establecen los parametros necesarios para la notificaci\xf3n, se configura el metodo de database y el de mail:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"\n    /**\n     * Create a new notification instance.\n     *\n     * @return void\n     */\n    public function __construct($id_vacante,$nombre_vacante,$usuario_id)\n    {\n        $this->id_vacante = $id_vacante;\n        $this->nombre_vacante = $nombre_vacante;\n        $this->usuario_id = $usuario_id;\n    }\n\n        // Almacena las notificaciones en la base de datos\n    public function toDatabase($notifiable){\n        return [ \n            'id_vacante' => $this->id_vacante,\n            'nombre_vacante' => $this->nombre_vacante,\n            'usuario_id' => $this->usuario_id\n        ];\n    }\n\n    public function toMail($notifiable)\n    {\n        $url = url('/candidatos/'.$this->id_vacante);\n        return (new MailMessage)\n                    ->line('Has recibido un nuevo candidato en tu vacante')\n                    ->line('Vacante: '.$this->nombre_vacante)\n                    ->action('Ver notificaciones', $url)\n                    ->line('Gracias!');\n    }\n\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Para instanciar la creaci\xf3n de la notificaci\xf3n:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// Crear notificaci\xf3n y enviar email\n$this->vacante->reclutador->notify(new NuevoCandidato($this->vacante->id,$this->vacante->titulo,auth()->user()->id));\n\n")),(0,i.kt)("h2",{id:"obtener-notificaciones"},"Obtener Notificaciones"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"    $notificaciones = auth()->user()->unreadNotifications;\n\n    // Limpiar notificaciones\n    auth()->user()->unreadNotifications->markAsRead();\n\n    return view('notificaciones.index',[\n        'notificaciones' => $notificaciones,\n    ]);\n")))}d.isMDXComponent=!0}}]);