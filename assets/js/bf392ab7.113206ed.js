"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5672],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>b});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),c=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(i.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=n,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(b,l(l({ref:r},p),{},{components:t})):a.createElement(b,l({ref:r},p))}));function b(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[u]="string"==typeof e?e:n,l[1]=s;for(var c=2;c<o;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8328:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=t(7462),n=(t(7294),t(3905));const o={},l="Seeder",s={unversionedId:"laravel/laravel-react/Notes/seeder",id:"laravel/laravel-react/Notes/seeder",title:"Seeder",description:"Sembrar valores en la base de datos en base a un modelo",source:"@site/docs/laravel/3-laravel-react/Notes/12-seeder.md",sourceDirName:"laravel/3-laravel-react/Notes",slug:"/laravel/laravel-react/Notes/seeder",permalink:"/docs/laravel/laravel-react/Notes/seeder",draft:!1,editUrl:"https://github.com/Leo-Zubiri/my-website/tree/master/docs/laravel/3-laravel-react/Notes/12-seeder.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Modelo Categor\xeda",permalink:"/docs/laravel/laravel-react/Notes/laravel-modelo"},next:{title:"Respuesta JSON",permalink:"/docs/laravel/laravel-react/Notes/api"}},i={},c=[],p={toc:c},u="wrapper";function d(e){let{components:r,...t}=e;return(0,n.kt)(u,(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"seeder"},"Seeder"),(0,n.kt)("p",null,"Sembrar valores en la base de datos en base a un modelo"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"php artisan make:seeder CategoriaSeeder")),(0,n.kt)("p",null,"Dentro del seeder se colocan los elementos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"\nuse Carbon\\Carbon;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents;\nuse Illuminate\\Database\\Seeder;\n\nclass CategoriaSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     *\n     * @return void\n     */\n    public function run()\n    {\n        DB::table('categorias')->insert([\n            'nombre' => 'Caf\xe9',\n            'icono' => 'cafe',\n            'created_at' => Carbon::now(),\n            'updated_at' => Carbon::now(),\n        ]);\n        \n        DB::table('categorias')->insert([\n            'nombre' => 'Hamburguesas',\n            'icono' => 'hamburguesa',\n            'created_at' => Carbon::now(),\n            'updated_at' => Carbon::now(),\n        ]);\n        \n    }\n}\n\n")),(0,n.kt)("p",null,"Desde el ",(0,n.kt)("inlineCode",{parentName:"p"},"DatabaseSeeder")," colocar:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    public function run()\n    {\n        $this->call(CategoriaSeeder::class);\n    }\n")),(0,n.kt)("p",null,"Por ultimo se ejecuta el seeder:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"php artisan db:seed")),(0,n.kt)("p",null,"Lo anterior siembra los valores en la base de datos pero puede duplicar el contenido."),(0,n.kt)("p",null,"Para evitar eso y volver a insertar todo desde cero:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"php artisan migrate:refresh --seed")))}d.isMDXComponent=!0}}]);