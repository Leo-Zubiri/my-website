"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8043],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),u=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},c=function(e){var r=u(e.components);return a.createElement(i.Provider,{value:r},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),m=n,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?a.createElement(f,s(s({ref:r},c),{},{components:t})):a.createElement(f,s({ref:r},c))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l[p]="string"==typeof e?e:n,s[1]=l;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},59984:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=t(87462),n=(t(67294),t(3905));const o={},s="Crear registro a partir de funcion de relacion",l={unversionedId:"laravel/devstagram/Notes/Attach",id:"laravel/devstagram/Notes/Attach",title:"Crear registro a partir de funcion de relacion",description:"Cuando se cumplen con los estandares de laravel es posible crear registros a partir de una funcion de relacion:",source:"@site/docs/laravel/1-devstagram/Notes/Attach.md",sourceDirName:"laravel/1-devstagram/Notes",slug:"/laravel/devstagram/Notes/Attach",permalink:"/my-website/docs/laravel/devstagram/Notes/Attach",draft:!1,editUrl:"https://github.com/Leo-Zubiri/my-website/tree/master/docs/laravel/1-devstagram/Notes/Attach.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Artisan",permalink:"/my-website/docs/laravel/devstagram/Notes/Artisan"},next:{title:"Auth",permalink:"/my-website/docs/laravel/devstagram/Notes/Auth"}},i={},u=[],c={toc:u},p="wrapper";function d(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,a.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"crear-registro-a-partir-de-funcion-de-relacion"},"Crear registro a partir de funcion de relacion"),(0,n.kt)("p",null,"Cuando se cumplen con los estandares de laravel es posible crear registros a partir de una funcion de relacion:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"Crear un post al usuario en base a la tabla User y Post de la base de datos\n$user->posts()->create([\n    ...\n])\n\n")),(0,n.kt)("p",null,"Cuando se crea una relacion en una tabla pivote donde la relacion es entre un modelo y este mismo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"// Modelo User\n// Almacenar seguidores usuario \npublic function followers(){\n    // A un usuario lo siguen mas usuarios, de la tabla followers esta relacion es 'user_id' y 'follower_id'\n    return $this->belongsToMany(User::class, 'followers', 'user_id','follower_id');\n}\n")),(0,n.kt)("p",null,"En este caso no se utiliza un create se utiliza un Attach:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    // Crear registro a partir de relacion\n    // A este usuario su follower es -> el usuario autenticado\n    public function store(User $user,Request $request){\n        $user->followers()->attach(auth()->user()->id);\n    }\n\n")),(0,n.kt)("p",null,"Para quitar un adjunto:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    public function destroy(User $user,Request $request){\n        $user->followers()->detach(auth()->user()->id);\n        return back();\n    }\n")))}d.isMDXComponent=!0}}]);