"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2329],{3905:(e,a,t)=>{t.d(a,{Zo:()=>m,kt:()=>g});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),p=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},m=function(e){var a=p(e.components);return r.createElement(s.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(t),d=n,g=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return t?r.createElement(g,i(i({ref:a},m),{},{components:t})):r.createElement(g,i({ref:a},m))}));function g(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8440:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(7462),n=(t(7294),t(3905));const o={},i="Fundamentos",l={unversionedId:"git/01 Fundamentos",id:"git/01 Fundamentos",title:"Fundamentos",description:"Una vez instalado Git se puede acceder a los comandos desde una consola.",source:"@site/docs/git/01 Fundamentos.md",sourceDirName:"git",slug:"/git/01 Fundamentos",permalink:"/my-website/docs/git/01 Fundamentos",draft:!1,editUrl:"https://github.com/Leo-Zubiri/my-website/tree/master/docs/git/01 Fundamentos.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/my-website/docs/git/"},next:{title:"Cambios en los Archivos",permalink:"/my-website/docs/git/02 cambios"}},s={},p=[{value:"Comandos b\xe1sicos de git",id:"comandos-b\xe1sicos-de-git",level:2},{value:"Primeras configuraciones",id:"primeras-configuraciones",level:2},{value:"Primeros pasos",id:"primeros-pasos",level:2},{value:"Branch (Ramas)",id:"branch-ramas",level:2},{value:"Commits",id:"commits",level:2},{value:"gitkeep",id:"gitkeep",level:3},{value:"Alias",id:"alias",level:2}],m={toc:p},c="wrapper";function u(e){let{components:a,...t}=e;return(0,n.kt)(c,(0,r.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"fundamentos"},"Fundamentos"),(0,n.kt)("p",null,"Una vez instalado Git se puede acceder a los comandos desde una consola."),(0,n.kt)("h2",{id:"comandos-b\xe1sicos-de-git"},"Comandos b\xe1sicos de git"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Versi\xf3n instalada de Git:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git --version\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Ayuda con los comandos de Git:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git help\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Ayuda espec\xedfica con un comando de Git: ",(0,n.kt)("inlineCode",{parentName:"p"},"git help <command>")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git help commit\n")))),(0,n.kt)("h2",{id:"primeras-configuraciones"},"Primeras configuraciones"),(0,n.kt)("p",null,"Configurar el perfil de git para interactuar con los repositorios, esta configuraci\xf3n es local para tener un control pero los datos no son tan fiables como para identificar correctamente a usuarios"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Nombre de Usuario"),": "),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global user.name "Leo Zubiri"\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Email")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global user.email "Leo.Zubiri@mail.com"\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"Ver los datos de configuracion global")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git config --global -e\n")))),(0,n.kt)("h2",{id:"primeros-pasos"},"Primeros pasos"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Para inicializar un repositorio")),(0,n.kt)("p",null,"Desde la ruta ra\xedz del proyecto"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Para inicializar/crear el repositorio"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git init\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Para ver el status de los cambios en la rama"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git status\n")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git status --short\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Agregar archivos al stage (Marcar como listo para posteriormente crear un commit)"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git add <file.ext>\n")),(0,n.kt)("p",{parentName:"li"},"  Agregar todos los archivos:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git add .\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Quitar archivo del Stage"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git reset <file.ext>\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Realizar commit (guardar cambios)"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git commit -m "Primer commit"\n'))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Regresar los cambios al \xfaltimo commit"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -- .\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Quitar los cambios de un archivo"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git checkout -- <file.ext>\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Hacer un add al stage y commit en un solo comando"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git commit -am "Changes added and commited with one command"\n')),(0,n.kt)("blockquote",{parentName:"li"},(0,n.kt)("p",{parentName:"blockquote"},"Solo funciona para los archivos que ya se encuentren por lo menos con seguimiento en un commit (No untracked)"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Ver los commits realizados"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git log\n")),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git log --short\n")))),(0,n.kt)("h2",{id:"branch-ramas"},"Branch (Ramas)"),(0,n.kt)("p",null,"Una rama es una ruta alternativa para trabajar sobre el c\xf3digo, de esta manera se puede trabajar en distintos conceptos a la vez sin la necesidad de estar chocando con los cambios"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"La rama principal ",(0,n.kt)("strong",{parentName:"p"},"master/main")," se debe utilizar lo menos posible, debe destinarse a las versiones finales o concretas para producci\xf3n")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Saber en que rama estoy"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git branch\n"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"Cambiar el nombre de la rama:"),(0,n.kt)("p",{parentName:"li"},"  Se cambia la rama master por el nombre de main"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git branch -m master main\n")),(0,n.kt)("p",{parentName:"li"},"  Cambiar globalmente el nombre de la rama principal en nuevos repositorios: "),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git config --global init.defaultBranch main\n")))),(0,n.kt)("h2",{id:"commits"},"Commits"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Los commits se realizan cuando se consigue una funcionalidad o estado del c\xf3digo que queremos almacenar.")),(0,n.kt)("p",null,"Existe la posibilidad de que alg\xfan commit que realicemos quisieramos agregar solo ciertos archivos al ",(0,n.kt)("strong",{parentName:"p"},"Stage")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git add *.html\n")),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Con lo anterior indicamos que todos los cambios en archivos html se agreguen al stage, busca en la ra\xedz donde se ejecuta el comando")),(0,n.kt)("p",null,"En caso de agregar elementos dentro de un directorio espec\xedfico"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git add js/*.js\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Agregar al stage todos los archivos de un directorio, incluyendo subdirectorios")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git add folder/\n")),(0,n.kt)("h3",{id:"gitkeep"},"gitkeep"),(0,n.kt)("p",null,"Por defecto, si creamos una carpeta sin archivos en su interior, git no intentar\xe1 darle seguimiento y no guarda registro de esta en el commit que realicemos"),(0,n.kt)("p",null,"Si dentro de una carpeta vac\xeda colocamos un archivo llamado ",(0,n.kt)("inlineCode",{parentName:"p"},".gitkeep"),", git interpretar\xe1 que debe darle seguimiento a pesar de que este archivo no contenga informaci\xf3n relevante o la carpeta en s\xed. "),(0,n.kt)("h2",{id:"alias"},"Alias"),(0,n.kt)("p",null,"Se pueden crear alias para ejecutar comandos que son muy largos y repetitivos constantemente. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Para crear un alias:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},'git config --global alias.s "status --short"\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Editar un alias:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"git config --global -e\n")))}u.isMDXComponent=!0}}]);