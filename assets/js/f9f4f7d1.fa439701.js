"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8502],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),m=n,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return r?a.createElement(f,l(l({ref:t},p),{},{components:r})):a.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7289:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const o={},l="Factories",i={unversionedId:"laravel/devstagram/Notes/Factories",id:"laravel/devstagram/Notes/Factories",title:"Factories",description:"Un factory permite hacer testing a la base de datos durante el",source:"@site/docs/laravel/1-devstagram/Notes/Factories.md",sourceDirName:"laravel/1-devstagram/Notes",slug:"/laravel/devstagram/Notes/Factories",permalink:"/docs/laravel/devstagram/Notes/Factories",draft:!1,editUrl:"https://github.com/Leo-Zubiri/my-website/tree/master/docs/laravel/1-devstagram/Notes/Factories.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Facades",permalink:"/docs/laravel/devstagram/Notes/Facades"},next:{title:"Directiva forelse",permalink:"/docs/laravel/devstagram/Notes/ForElse"}},s={},c=[{value:"Retornar el factory",id:"retornar-el-factory",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...o}=e;return(0,n.kt)(u,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"factories"},"Factories"),(0,n.kt)("p",null,"Un factory permite hacer testing a la base de datos durante el "),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"php artisan make:factory")),(0,n.kt)("p",null,"Desde el archivo correspondiente al factory se establecen los campos que se desea probar de la base de datos para rellenar con informaci\xf3n"),(0,n.kt)("p",null,"Se utiliza la librer\xeda incorporada llamada ",(0,n.kt)("strong",{parentName:"p"},"faker")," para generar informaci\xf3n aleatoria."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"    public function definition()\n    {\n        return [\n            'titulo' => $this->faker->sentence($nbWords = 5),\n            'descripcion' => $this->faker->sentence(20),\n            'imagen' => $this->faker->uuid().'jpg',\n            'user_id' => $this->faker->randomElement([2,3,8])\n        ];\n    }\n")),(0,n.kt)("h1",{id:"probar-factory"},"Probar Factory"),(0,n.kt)("p",null,"Para probar una factory se debe utilizar Tinker (CLI)"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"php artisan tinker")),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(2793).Z,width:"849",height:"400"})),(0,n.kt)("p",null,"Para probar factory"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"Post::factory()->times(200)->create()")),(0,n.kt)("p",null,(0,n.kt)("img",{src:r(4634).Z,width:"1304",height:"694"})),(0,n.kt)("p",null,"En caso de algun test que no funcion\xf3 como esperabamos:"),(0,n.kt)("h2",{id:"retornar-el-factory"},"Retornar el factory"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"php artisan migrate:rollback --step=1")),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"php artisan migrate")),(0,n.kt)("p",null,"Se ejecuta nuevamente el factory"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Lo ideal es hacer factories para la base de datos local")))}d.isMDXComponent=!0},2793:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/7.0-8c09a75a022a4aeaecbf06f259abf83e.png"},4634:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/7.1-35054e83ffb7eebc129893e6ca35b4e2.png"}}]);