"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[145],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=a,f=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1788:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={},l="Relaciones en BDD",s={unversionedId:"laravel/devstagram/Notes/Relaciones",id:"laravel/devstagram/Notes/Relaciones",title:"Relaciones en BDD",description:"Los modelos pueden tener distintos tipos de relaciones entre si",source:"@site/docs/laravel/1-devstagram/Notes/Relaciones.md",sourceDirName:"laravel/1-devstagram/Notes",slug:"/laravel/devstagram/Notes/Relaciones",permalink:"/docs/laravel/devstagram/Notes/Relaciones",draft:!1,editUrl:"https://github.com/Leo-Zubiri/my-website/tree/master/docs/laravel/1-devstagram/Notes/Relaciones.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Evitar Guardar registros iguales",permalink:"/docs/laravel/devstagram/Notes/RegistrosDuplicados"},next:{title:"Routing",permalink:"/docs/laravel/devstagram/Notes/Routing"}},i={},c=[],u={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"relaciones-en-bdd"},"Relaciones en BDD"),(0,a.kt)("p",null,"Los modelos pueden tener distintos tipos de relaciones entre si"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"One to One. Un usuario tiene un perfil - Un perfil es de un usuario"),(0,a.kt)("li",{parentName:"ol"},"One to many. Usuario puede tener multiples posts"),(0,a.kt)("li",{parentName:"ol"},"Belongs to. Un Post pertenece a un usuario"),(0,a.kt)("li",{parentName:"ol"},"Has one of many. Traer el ultimo registro de multiples relacionados a un modelo"),(0,a.kt)("li",{parentName:"ol"},"Has one of thought. Un modelo con relacion a muchos pero cada uno de estos es una Relacion uno a uno."),(0,a.kt)("li",{parentName:"ol"},"Has many through. Relacion muchos a uno y a partir de ahi muchos a uno")),(0,a.kt)("p",null,"En el Modelo se agrega una funcion que haga referencia a la relacion"),(0,a.kt)("p",null,"Por ejemplo, Un usuario tiene varios Posts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function posts(){\n  return $this->hasMany(Post::class);\n}\n")),(0,a.kt)("p",null,"Para traer informacion en especifico"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-php"},"public function user(){\n  return $this->belongsTo(User::class)->select(['name','username']);\n}\n")))}m.isMDXComponent=!0}}]);